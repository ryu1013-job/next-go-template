/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * TODO API
 * OpenAPI spec version: 1.0.0
 */
import { apiFetch } from '../lib/fetcher'

export type TodoStatus = typeof TodoStatus[keyof typeof TodoStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TodoStatus = {
  open: 'open',
  done: 'done',
  archived: 'archived',
} as const

export interface Todo {
  id: string
  /**
   * @minLength 1
   * @maxLength 200
   */
  title: string
  /**
   * @maxLength 2000
   * @nullable
   */
  description?: string | null
  status: TodoStatus
  /** @nullable */
  dueDate?: string | null
  createdAt: string
  updatedAt: string
}

export interface TodoCreateInput {
  /**
   * @minLength 1
   * @maxLength 200
   */
  title: string
  /**
   * @maxLength 2000
   * @nullable
   */
  description?: string | null
  /** @nullable */
  dueDate?: string | null
}

export type TodoUpdateInputStatus = typeof TodoUpdateInputStatus[keyof typeof TodoUpdateInputStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TodoUpdateInputStatus = {
  open: 'open',
  done: 'done',
  archived: 'archived',
} as const

export interface TodoUpdateInput {
  /**
   * @minLength 1
   * @maxLength 200
   */
  title?: string
  /**
   * @maxLength 2000
   * @nullable
   */
  description?: string | null
  status?: TodoUpdateInputStatus
  /** @nullable */
  dueDate?: string | null
}

export interface ListTodosParams {
  status?: ListTodosStatus
  /**
   * @minimum 1
   * @maximum 100
   */
  limit?: number
}

export type ListTodosStatus = typeof ListTodosStatus[keyof typeof ListTodosStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTodosStatus = {
  open: 'open',
  done: 'done',
  archived: 'archived',
} as const

export interface ListTodos200 {
  items: Todo[]
  /** @nullable */
  nextCursor: string | null
}

export interface listTodosResponse200 {
  data: ListTodos200
  status: 200
}

export type listTodosResponseSuccess = (listTodosResponse200) & {
  headers: Headers
}

export type listTodosResponse = (listTodosResponseSuccess)

export function getListTodosUrl(params?: ListTodosParams) {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/todos?${stringifiedParams}` : `/todos`
}

export async function listTodos(params?: ListTodosParams, options?: RequestInit): Promise<listTodosResponse> {
  return apiFetch<listTodosResponse>(getListTodosUrl(params), {
    ...options,
    method: 'GET',

  })
}

export interface createTodoResponse201 {
  data: Todo
  status: 201
}

export type createTodoResponseSuccess = (createTodoResponse201) & {
  headers: Headers
}

export type createTodoResponse = (createTodoResponseSuccess)

export function getCreateTodoUrl() {
  return `/todos`
}

export async function createTodo(todoCreateInput: TodoCreateInput, options?: RequestInit): Promise<createTodoResponse> {
  return apiFetch<createTodoResponse>(getCreateTodoUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      todoCreateInput,
    ),
  })
}

export interface getTodoResponse200 {
  data: Todo
  status: 200
}

export interface getTodoResponse404 {
  data: void
  status: 404
}

export type getTodoResponseSuccess = (getTodoResponse200) & {
  headers: Headers
}
export type getTodoResponseError = (getTodoResponse404) & {
  headers: Headers
}

export type getTodoResponse = (getTodoResponseSuccess | getTodoResponseError)

export function getGetTodoUrl(id: string) {
  return `/todos/${id}`
}

export async function getTodo(id: string, options?: RequestInit): Promise<getTodoResponse> {
  return apiFetch<getTodoResponse>(getGetTodoUrl(id), {
    ...options,
    method: 'GET',

  })
}

export interface updateTodoResponse200 {
  data: Todo
  status: 200
}

export type updateTodoResponseSuccess = (updateTodoResponse200) & {
  headers: Headers
}

export type updateTodoResponse = (updateTodoResponseSuccess)

export function getUpdateTodoUrl(id: string) {
  return `/todos/${id}`
}

export async function updateTodo(id: string, todoUpdateInput: TodoUpdateInput, options?: RequestInit): Promise<updateTodoResponse> {
  return apiFetch<updateTodoResponse>(getUpdateTodoUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      todoUpdateInput,
    ),
  })
}

export interface deleteTodoResponse204 {
  data: void
  status: 204
}

export type deleteTodoResponseSuccess = (deleteTodoResponse204) & {
  headers: Headers
}

export type deleteTodoResponse = (deleteTodoResponseSuccess)

export function getDeleteTodoUrl(id: string) {
  return `/todos/${id}`
}

export async function deleteTodo(id: string, options?: RequestInit): Promise<deleteTodoResponse> {
  return apiFetch<deleteTodoResponse>(getDeleteTodoUrl(id), {
    ...options,
    method: 'DELETE',

  })
}
